# -*- coding: utf-8 -*-
"""MLproject.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rJg9-P3wUSJaU1JOBuVkRPf5RODo6Kkg
"""

import pandas as pd
import numpy as np
df = pd.read_csv('/content/Housing.csv')
print(df)

df

df.sort_values("price")

df.dropna(inplace=True)
df.drop_duplicates(inplace=True)

print("Dataset shape:", df.shape)
print("\nFirst 5 rows:")
print(df.head())
print("\nData types and missing values:")
print(df.info())
print("\nDescriptive statistics:")
print(df.describe())

import matplotlib.pyplot as plt
import seaborn as sns


plt.figure(figsize=(10, 6))
sns.histplot(df['price'], kde=True)
plt.title('Distribution of House Prices')
plt.xlabel('Price (₹)')
plt.ylabel('Frequency')
plt.show()

df.hist(figsize=(15, 12), bins=30, edgecolor='black')
plt.tight_layout()
plt.show()

number_columns = df.select_dtypes(include='number').columns
number_columns
object_columns = df.select_dtypes(include='object').columns
object_columns

binary_columns = ['mainroad', 'guestroom', 'basement', 'hotwaterheating',
                 'airconditioning', 'prefarea']

for col in binary_columns:
    df[col] = df[col].map({'yes': 1, 'no': 0})

df['furnishingstatus'] = df['furnishingstatus'].map({'unfurnished': 0,'semi-furnished': 1,'furnished': 2})

corr = df.corr()

plt.figure(figsize=(12, 10))

sns.heatmap(corr,annot=True, fmt=".2f", cmap='coolwarm',center=0,linewidths=0.5,cbar_kws={"shrink": 0.8})

plt.title('Housing Features Correlation Heatmap', fontsize=16, pad=20)

plt.tight_layout()

plt.show()

plt.figure(figsize=(10, 6))
plt.scatter(df['area'], df['price'], alpha=0.5, color='blue')
plt.title('Area vs. Price', fontsize=16)
plt.xlabel('Area (sq ft)', fontsize=12)
plt.ylabel('Price (₹)', fontsize=12)
plt.grid(True, linestyle='--', alpha=0.5)
plt.show()

plt.figure(figsize=(8, 6))
sns.boxplot(x=df['price'], color='skyblue')

plt.title('Distribution of House Prices', fontsize=16)
plt.xlabel('Price (₹)', fontsize=12)
plt.xticks(rotation=45)

plt.grid(axis='x', linestyle='--', alpha=0.5)
plt.show()

df['price_per_sqft'] = df['price'] / df['area']

X = df.drop(['price', 'price_per_sqft'], axis=1)
y = df['price']

categorical_cols = ['furnishingstatus']
numerical_cols = [col for col in X.columns if col not in categorical_cols]

from sklearn.preprocessing import StandardScaler, OneHotEncoder
numerical_transformer = StandardScaler()
categorical_transformer = OneHotEncoder(handle_unknown='ignore')

from sklearn.compose import ColumnTransformer
preprocessor = ColumnTransformer(
    transformers=[
        ('num', numerical_transformer, numerical_cols),
        ('cat', categorical_transformer, categorical_cols)])

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

from sklearn.pipeline import Pipeline
from sklearn.ensemble import RandomForestRegressor

model = Pipeline(steps=[
    ('preprocessor', preprocessor),
    ('regressor', RandomForestRegressor(n_estimators=100, random_state=42))])

model.fit(X_train, y_train)

y_pred = model.predict(X_test)

from sklearn.metrics import mean_squared_error, r2_score

mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)
r2 = r2_score(y_test, y_pred)

print(f"\nModel Performance:")
print(f"Root Mean Squared Error: {rmse:,.2f}")
print(f"R-squared: {r2:.2f}")

feature_names = numerical_cols.copy()
ohe_feature_names = model.named_steps['preprocessor'].named_transformers_['cat'].get_feature_names_out(categorical_cols)
feature_names.extend(ohe_feature_names)

importances = model.named_steps['regressor'].feature_importances_

feature_importance_df = pd.DataFrame({'Feature': feature_names, 'Importance': importances})
feature_importance_df = feature_importance_df.sort_values('Importance', ascending=False)

plt.figure(figsize=(12, 8))
sns.barplot(x='Importance', y='Feature', data=feature_importance_df.head(10))
plt.title('Top 10 Important Features')
plt.show()

sample_house = {
    'area': [8000],
    'bedrooms': [3],
    'bathrooms': [3],
    'stories': [3],
    'mainroad': [1],
    'guestroom': [0],
    'basement': [0],
    'hotwaterheating': [0],
    'airconditioning': [1],
    'parking': [2],
    'prefarea': [1],
    'furnishingstatus': ['furnished']
}

sample_df = pd.DataFrame(sample_house)
predicted_price = model.predict(sample_df)
print(f"\nPredicted price for sample house: ₹{predicted_price[0]:,.2f}")

from sklearn.metrics import accuracy_score
# Example data
y_true = [0, 1, 0, 1, 0, 1, 1, 0]
y_pred = [1, 1, 0, 1, 0, 0, 1, 0]
# Calculate accuracy score
accuracy = accuracy_score(y_true, y_pred)
# Print the accuracy score
print("Accuracy Score:", accuracy)